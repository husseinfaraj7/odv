#!/bin/bash

# setup-env.sh - Environment configuration setup script for Faraj Project
# Usage: ./setup-env.sh [local|render|production]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [local|render|production]"
    echo ""
    echo "This script sets up environment variables for the Faraj Project backend."
    echo ""
    echo "Arguments:"
    echo "  local       - Setup for local development (uses H2 database)"
    echo "  render      - Setup for Render.com deployment"
    echo "  production  - Setup for production deployment"
    echo ""
    echo "Examples:"
    echo "  $0 local"
    echo "  $0 render"
    echo "  $0 production"
}

# Function to create environment template
create_env_template() {
    local env_type=$1
    local env_file="backend/.env"
    
    print_info "Creating .env template for $env_type environment..."
    
    case $env_type in
        "local")
            cat > "$env_file" << 'EOF'
# Local Development Environment Configuration
# Generated by setup-env.sh

# Server Configuration
PORT=8080

# Local Database Configuration (H2 - in-memory)
DATABASE_URL=jdbc:h2:mem:testdb
DB_USERNAME=sa
DB_PASSWORD=
DDL_AUTO=create-drop
DATABASE_PLATFORM=org.hibernate.dialect.H2Dialect
H2_CONSOLE_ENABLED=true

# Email Configuration
ADMIN_EMAIL=your-admin@example.com

# Brevo SMTP Configuration (for testing email functionality)
BREVO_SMTP_SERVER=smtp-relay.brevo.com
BREVO_SMTP_PORT=587
BREVO_SMTP_USERNAME=your-smtp-username
BREVO_API_KEY=your-brevo-api-key
BREVO_SENDER_EMAIL=noreply@yourdomain.com
BREVO_SENDER_NAME=Your App Name

# Supabase Configuration (optional for local testing)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_ROLE_KEY=your-service-role-key

# Frontend URL
FRONTEND_URL=http://localhost:3000
EOF
            ;;
            
        "render")
            cat > "$env_file" << 'EOF'
# Render.com Deployment Environment Configuration
# Generated by setup-env.sh
# Note: Most variables are configured in render.yaml, this file is for local testing of render config

# Server Configuration
PORT=10000

# Database Configuration (PostgreSQL - provided by Render)
DATABASE_URL=postgresql://username:password@hostname:5432/database_name

# Email Configuration
ADMIN_EMAIL=your-admin@yourdomain.com

# Brevo Email Service Configuration
BREVO_API_KEY=your-brevo-api-key
BREVO_SMTP_SERVER=smtp-relay.brevo.com
BREVO_SMTP_PORT=587
BREVO_SMTP_USERNAME=96f5ae002@smtp-brevo.com
BREVO_SENDER_EMAIL=noreply@yourdomain.com
BREVO_SENDER_NAME=Your Organization Name

# Supabase Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-supabase-anon-key
SUPABASE_ROLE_KEY=your-supabase-service-role-key

# Frontend URL
FRONTEND_URL=https://yourdomain.com

# Database Configuration for Production
DDL_AUTO=update
DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
H2_CONSOLE_ENABLED=false
EOF
            ;;
            
        "production")
            cat > "$env_file" << 'EOF'
# Production Environment Configuration
# Generated by setup-env.sh

# Server Configuration
PORT=8080

# Production Database Configuration (PostgreSQL)
DATABASE_URL=postgresql://username:password@hostname:5432/database_name
DB_USERNAME=your-db-username
DB_PASSWORD=your-secure-db-password

# Production Database Settings
DDL_AUTO=update
DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
H2_CONSOLE_ENABLED=false

# Email Configuration
ADMIN_EMAIL=admin@yourdomain.com

# Brevo Production Email Configuration
BREVO_API_KEY=your-production-brevo-api-key
BREVO_SMTP_SERVER=smtp-relay.brevo.com
BREVO_SMTP_PORT=587
BREVO_SMTP_USERNAME=your-production-smtp-username
BREVO_SENDER_EMAIL=noreply@yourdomain.com
BREVO_SENDER_NAME=Your Organization Name

# Production Supabase Configuration
SUPABASE_URL=https://your-production-project.supabase.co
SUPABASE_ANON_KEY=your-production-anon-key
SUPABASE_ROLE_KEY=your-production-service-role-key

# Production Frontend URL
FRONTEND_URL=https://yourdomain.com
EOF
            ;;
    esac
    
    print_success "Environment template created at $env_file"
}

# Function to prompt user to edit the file
prompt_edit() {
    local env_file="backend/.env"
    
    print_info "Environment template has been created with placeholder values."
    print_warning "You MUST edit the .env file with your actual values before running the application."
    echo ""
    echo "The .env file is located at: $env_file"
    echo ""
    
    # Try to open the file with available editors
    if command -v code >/dev/null 2>&1; then
        read -p "Open .env file in VS Code? (y/N): " open_vscode
        if [[ $open_vscode =~ ^[Yy]$ ]]; then
            code "$env_file"
            print_success "Opened .env file in VS Code"
            return
        fi
    fi
    
    if command -v nano >/dev/null 2>&1; then
        read -p "Open .env file in nano editor? (y/N): " open_nano
        if [[ $open_nano =~ ^[Yy]$ ]]; then
            nano "$env_file"
            print_success "Finished editing .env file"
            return
        fi
    fi
    
    if command -v vim >/dev/null 2>&1; then
        read -p "Open .env file in vim editor? (y/N): " open_vim
        if [[ $open_vim =~ ^[Yy]$ ]]; then
            vim "$env_file"
            print_success "Finished editing .env file"
            return
        fi
    fi
    
    print_info "Please manually edit the .env file at: $env_file"
    print_info "Replace all placeholder values with your actual configuration values."
}

# Function to show next steps
show_next_steps() {
    local env_type=$1
    
    print_info "Next steps:"
    echo ""
    echo "1. Edit the .env file with your actual values"
    echo "2. Refer to README-environment-setup.md for detailed instructions"
    echo "3. Verify your configuration with: cd backend && ./mvnw test"
    echo ""
    
    case $env_type in
        "local")
            echo "For local development:"
            echo "  - Start the application: cd backend && ./mvnw spring-boot:run"
            echo "  - Access H2 Console: http://localhost:8080/h2-console"
            ;;
        "render")
            echo "For Render deployment:"
            echo "  - Configure environment variables in Render dashboard"
            echo "  - Deploy using: git push origin main"
            ;;
        "production")
            echo "For production deployment:"
            echo "  - Ensure all sensitive values are properly secured"
            echo "  - Test the configuration thoroughly before deployment"
            ;;
    esac
}

# Main script logic
main() {
    print_info "Faraj Project Environment Setup Script"
    echo ""
    
    # Check if we're in the correct directory
    if [[ ! -d "backend" ]]; then
        print_error "This script must be run from the project root directory (where the 'backend' folder is located)"
        exit 1
    fi
    
    # Check arguments
    if [[ $# -ne 1 ]]; then
        print_error "Invalid number of arguments"
        echo ""
        show_usage
        exit 1
    fi
    
    local env_type=$1
    
    # Validate environment type
    if [[ ! "$env_type" =~ ^(local|render|production)$ ]]; then
        print_error "Invalid environment type: $env_type"
        echo ""
        show_usage
        exit 1
    fi
    
    # Check if .env already exists
    if [[ -f "backend/.env" ]]; then
        print_warning ".env file already exists at backend/.env"
        read -p "Do you want to overwrite it? (y/N): " overwrite
        if [[ ! $overwrite =~ ^[Yy]$ ]]; then
            print_info "Operation cancelled. Existing .env file preserved."
            exit 0
        fi
    fi
    
    # Create the environment template
    create_env_template "$env_type"
    
    # Prompt user to edit the file
    prompt_edit
    
    # Show next steps
    show_next_steps "$env_type"
    
    print_success "Environment setup completed for $env_type environment!"
    print_info "Don't forget to review README-environment-setup.md for detailed configuration guidance."
}

# Run main function with all arguments
main "$@"